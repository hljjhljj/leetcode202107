//方法1：改良后的快速排序
class Solution {
public:
    vector<int> smallestK(vector<int>& arr, int k) {
        myfunction(0,arr.size()-1,arr,k);
        vector<int> res(arr.begin(),arr.begin()+k);
        return res;
    }
    void myfunction(int left,int right,vector<int>& arr,int k){
        if(left>=right) return;
        int base = arr[left];
        int i = left, j = right;  
        while(i<j){
            while(arr[j]>base && i<j) j--;
            while(arr[i]<=base && i<j) i++;
            if(i < j) swap(arr[i],arr[j]);
        }
        arr[left] = arr[i];
        arr[i] = base;
        if(i==k-1) return;
        if(i>k-1) myfunction(left,i-1,arr,k);
        if(i<k-1) myfunction(i+1,right,arr,k);
    }
};


//方法2-1：优先队列（c++ priority_queue在queue头文件中，默认大根堆）
class Solution {
public:
    vector<int> smallestK(vector<int>& arr, int k) {
        vector<int> res;
        if(k==0) return res;
        priority_queue<int> Q;
        for(int i=0;i<arr.size();i++){
            if(Q.size()<k){
                Q.push(arr[i]);
            }
            else{
                if(Q.top()>arr[i]){
                    Q.pop();
                    Q.push(arr[i]);
                }
            }
        }
        while(!Q.empty()) {
            res.push_back(Q.top());
            Q.pop();
        }
        return res;
    }
};

//方法2-2：手动实现大根堆
class Solution {
public:
    vector<int> smallestK(vector<int>& arr, int k) {
        vector<int> res;
        if(k==0) return res;
        build(arr,k);//对前k个构造大根堆
        for(int i=k;i<arr.size();i++){
            if(arr[i]<arr[0]){
                arr[0]=arr[i];
                adjust(arr,0,k);
            }
        }
        for(int j=0;j<k;j++){
            res.push_back(arr[j]);
        }
        return res;
    }
    void build(vector<int>& arr,int k){
        for(int i=k/2-1;i>=0;i--){
            adjust(arr,i,k);
        }
    }
    void adjust(vector<int>& arr,int index,int len){
        int left=index*2+1,right=index*2+2;
        int maxindex=index;
        if(left<len && arr[left]>arr[index]) maxindex=left;
        if(right<len && arr[right]>arr[left] && arr[right]>arr[index]) maxindex=right;
        if(index!=maxindex){
            swap(arr[index],arr[maxindex]);
            adjust(arr,maxindex,len);
        }
    }
};
