class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return nullptr;
        return merge(lists,0,lists.size()-1);
    }

    ListNode* merge(vector<ListNode*>& lists,int low,int high){
        if(low==high) return lists[low];
        int mid=(low+high)/2;
        ListNode *link1=merge(lists,low,mid);
        ListNode *link2=merge(lists,mid+1,high);
        return merge2Lists(link1,link2);
    }

    //两条链表合并
    ListNode* merge2Lists(ListNode* a,ListNode* b){
        ListNode *dummy=new ListNode(0);
        ListNode *tmp=dummy;
        while(a && b){
            if(a->val<b->val){
                dummy->next=a;
                a=a->next;
            }
            else{
                dummy->next=b;
                b=b->next;
            }
            dummy=dummy->next;
        }
        dummy->next=a?a:b;

        return tmp->next;
    }
};
