//方法1：递归超时
class Solution {
public:
    int numWays(int n) {
        return myfunction(n);
    }
    int myfunction(int n){
        if(n==0 || n==1) return 1;
        return myfunction(n-1)+myfunction(n-2)%1000000007;
    }
};
//方法2：动态规划
class Solution {
public:
    int numWays(int n) {
        if(n==0) return 1;
        int dp[n+1];
        dp[0]=1;dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=(dp[i-1]+dp[i-2])%1000000007;
        }
        return dp[n];
    }
};
//方法3：动态规划空间优化
class Solution {
public:
    int numWays(int n) {
        if(n==0) return 1;
        int dp_0=1,dp_1=1;
        for(int i=2;i<=n;i++){
            int temp=dp_1;
            dp_1=(dp_0+dp_1)%1000000007;
            dp_0=temp;
        }
        return dp_1;
    }
};
