class Solution {
public:
    int minDistance(string word1, string word2) {
        vector<vector<int>> dp(word1.size()+1,vector<int>(word2.size()+1,0));
        //base case，一方为空的时候
        for(int i=0;i<=word1.size();i++){
            dp[i][0]=i;
        }
        for(int j=0;j<=word2.size();j++){
            dp[0][j]=j;
        }
        for(int i=1;i<=word1.size();i++){
            for(int j=1;j<=word2.size();j++){
                if(word1.at(i-1)==word2.at(j-1))//相等，不用做任何操作
                //word1.at(i-1)==word2.at(j-1)记得-1，因为i j从1开始的
                    dp[i][j]=dp[i-1][j-1];
                else dp[i][j]=min(min(dp[i-1][j]+1,//删除
                                      dp[i][j-1]+1),//插入
                                      dp[i-1][j-1]+1);//替换
            }
        }
        return dp[word1.size()][word2.size()];
    }
};
