//二维空间未优化
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<vector<int>> dp(coins.size()+1,vector<int>(amount+1,0));
        //int dp[coins.size()+1][amount+1];
        //dp[i][j]表示使用前i个硬币，背包容量为j的时候的组合数
        //base case为dp[0][...]=0,dp[...][0]=1;
        for(int i=0;i<=coins.size();i++){
            dp[i][0]=1;
        }
        for(int i=1;i<=coins.size();i++){
            for(int j=1;j<=amount;j++){
                if(j>=coins[i-1]) dp[i][j]=dp[i-1][j]+dp[i][j-coins[i-1]];
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[coins.size()][amount];
    }
};

//状态压缩
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<int> dp(amount+1,0);
        //dp[i][j]表示使用前i个硬币，背包容量为j的时候的组合数
        //base case为dp[0][...]=0,dp[...][0]=1;
        dp[0]=1;
        for(int i=1;i<=coins.size();i++){
            for(int j=1;j<=amount;j++){
                if(j>=coins[i-1]) dp[j]=dp[j]+dp[j-coins[i-1]];
            }
        }
        return dp[amount];
    }
};
