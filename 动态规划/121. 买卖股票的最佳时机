class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //dp[i][k][0/1]第i天最多进行k次交易，0不持有，1持有
        //base case:dp[-1][][1]=-inf;dp[-1][][0]=0;dp[][0][0]=0;dp[][0][1]=-inf;
        //dp[i][k][0]=max(dp[i-1][k][0],dp[i-1][k][1]+prices[i]);
        //dp[i][k][1]=max(dp[i-1][k][1],dp[i-1][k-1][0]-prices[i]);
        //k=1时
        //dp[i][1][0]=max(dp[i-1][1][0],dp[i-1][1][1]+prices[i]);
        //dp[i][1][1]=max(dp[i-1][1][1],dp[i-1][0][0]-prices[i]);
        //           =max(dp[i-1][1][1],-prices[i]);
        //k对转移方程没有影响
        //dp[i][0]=max(dp[i-1][0],dp[i-1][1]+price[i]);
        //dp[i][1]=max(dp[i-1][1],-price[i]);
        int len=prices.size();
        int dp[len][2];
        dp[0][0]=0;dp[0][1]=-prices[0];//防止0-1=-1数组越界
        //不限制购买次数时：dp[0][1]=INT_MIN
        for(int i=1;i<len;i++){
            dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i]);
            dp[i][1]=max(dp[i-1][1],-prices[i]);
        }
        return dp[len-1][0];
    }
};

//存储优化
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //不需要一个数组，只需要两个数字存储
        int len=prices.size();
        int dp_i_0=0,dp_i_1=-prices[0];//防止0-1=-1数组越界
        for(int i=1;i<len;i++){
            dp_i_0=max(dp_i_0,dp_i_1+prices[i]);
            dp_i_1=max(dp_i_1,-prices[i]);
        }
        return dp_i_0;
    }
};
