class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        //dp[i][j]代表在text1和text2中分别以i-1和j-1为结尾的字符串的最长公共子串
        //画蛇添足的这个-1是为了base case方便
        int len1=text1.size(),len2=text2.size();
        // int dp[len1+1][len2+1];
        vector<vector<int>> dp(len1 + 1, vector<int>(len2 + 1));//不要用int dp[len1+1][len2+1];莫名报错
        //dp[0][...]和dp[...][0]是base case，不用初始化，默认为0
        for(int i=1;i<=len1;i++){
            for(int j=1;j<=len2;j++){
                if(text1.at(i-1)==text2.at(j-1))//注意-1
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[len1][len2];
    }
};
