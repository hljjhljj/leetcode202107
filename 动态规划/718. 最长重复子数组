class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        //动态规划dp[i][j]代表以nums[i]和nums[j]“为结尾”的子数组长度
        int len1=nums1.size(),len2=nums2.size();
        int res=0;
        vector<vector<int>> dp(len1+1,vector<int>(len2+1,0));
        //base case是dp[0][...]和dp[...][0]=0
        for(int i=1;i<=len1;i++){
            for(int j=1;j<=len2;j++){
                if(nums1[i-1]==nums2[j-1]) //记得-1，因为dp不是从0开始的
                    dp[i][j]=dp[i-1][j-1]+1;
                else dp[i][j]=0;
                res=max(res,dp[i][j]);
            }
        }
        return res;
    }
};
